import java.io.File;
import java.io.IOException;

// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: D:/jflex-1.8.2/examples/simple/src/main/jflex/prj_phase1.flex

 /*compiler project (phase 1)
 
 author : ghazal khodabakhshi,farnaz mirnezami
 
  */


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Yylex {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\1\2\2\3\1\4\22\0\1\1\1\0"+
    "\1\5\2\0\1\6\1\7\1\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\12\20\1\21\1\22"+
    "\1\23\1\24\1\25\2\0\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\37\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\0\1\62\1\0\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\37\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\37\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114"+
    "\1\115\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\21\23\1\24\1\25\20\23"+
    "\1\26\1\1\1\27\3\2\2\1\1\30\1\3\1\31"+
    "\2\0\1\32\1\33\1\0\1\34\1\35\1\36\1\37"+
    "\2\0\11\23\1\40\10\23\1\40\33\23\1\40\32\23"+
    "\1\41\2\0\1\2\1\42\1\43\1\2\1\3\1\0"+
    "\1\30\1\44\1\15\1\44\11\23\1\45\7\23\1\40"+
    "\46\23\1\40\24\23\1\0\27\23\1\46\11\23\1\0"+
    "\25\23\1\40\11\23\1\40\6\23\1\0\1\23\1\40"+
    "\11\23\1\40\16\23\1\0\20\23\1\0\12\23\1\0"+
    "\5\23\1\0\2\23\1\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\u0186\0\234\0\u01d4"+
    "\0\234\0\234\0\234\0\u0222\0\234\0\u0270\0\u02be\0\u030c"+
    "\0\u035a\0\u03a8\0\234\0\u03f6\0\234\0\u0444\0\u0492\0\u04e0"+
    "\0\u052e\0\u057c\0\u05ca\0\u0618\0\u0666\0\u06b4\0\u0702\0\u0750"+
    "\0\u079e\0\u07ec\0\u083a\0\u0888\0\u08d6\0\u0924\0\u0972\0\234"+
    "\0\234\0\u09c0\0\u0a0e\0\u0a5c\0\u0aaa\0\u0af8\0\u0b46\0\u0b94"+
    "\0\u0be2\0\u0c30\0\u0c7e\0\u0ccc\0\u0d1a\0\u0d68\0\u0db6\0\u0e04"+
    "\0\u0e52\0\234\0\u0ea0\0\234\0\u0eee\0\234\0\u0f3c\0\u0f8a"+
    "\0\u0fd8\0\234\0\u1026\0\234\0\u1074\0\u02be\0\u02be\0\234"+
    "\0\u10c2\0\234\0\234\0\234\0\234\0\u1110\0\u115e\0\u11ac"+
    "\0\u11fa\0\u1248\0\u1296\0\u12e4\0\u1332\0\u1380\0\u13ce\0\u141c"+
    "\0\u146a\0\u14b8\0\u1506\0\u1554\0\u15a2\0\u15f0\0\u163e\0\u168c"+
    "\0\u16da\0\u06b4\0\u1728\0\u1776\0\u17c4\0\u1812\0\u1860\0\u18ae"+
    "\0\u18fc\0\u194a\0\u1998\0\u19e6\0\u1a34\0\u1a82\0\u1ad0\0\u1b1e"+
    "\0\u1b6c\0\u1bba\0\u1c08\0\u1c56\0\u1ca4\0\u1cf2\0\u1d40\0\u1d8e"+
    "\0\u1ddc\0\u1e2a\0\u1e78\0\u1ec6\0\u1f14\0\u1f62\0\u1fb0\0\u1ffe"+
    "\0\u204c\0\u209a\0\u20e8\0\u2136\0\u2184\0\u21d2\0\u2220\0\u226e"+
    "\0\u22bc\0\u230a\0\u2358\0\u23a6\0\u23f4\0\u2442\0\u2490\0\u24de"+
    "\0\u252c\0\u257a\0\u25c8\0\u2616\0\u2664\0\u26b2\0\u2700\0\u274e"+
    "\0\234\0\u279c\0\u27ea\0\u2838\0\234\0\234\0\u2886\0\u28d4"+
    "\0\u2922\0\u0186\0\u2970\0\u29be\0\234\0\u2a0c\0\u2a5a\0\u2aa8"+
    "\0\u2af6\0\u2b44\0\u2b92\0\u2be0\0\u2c2e\0\u2c7c\0\u06b4\0\u2cca"+
    "\0\u2d18\0\u2d66\0\u2db4\0\u2e02\0\u2e50\0\u2e9e\0\u2eec\0\u2f3a"+
    "\0\u2f88\0\u2fd6\0\u3024\0\u3072\0\u30c0\0\u310e\0\u315c\0\u31aa"+
    "\0\u31f8\0\u3246\0\u3294\0\u32e2\0\u3330\0\u337e\0\u33cc\0\u341a"+
    "\0\u3468\0\u34b6\0\u3504\0\u3552\0\u35a0\0\u35ee\0\u363c\0\u368a"+
    "\0\u36d8\0\u3726\0\u3774\0\u37c2\0\u3810\0\u385e\0\u38ac\0\u38fa"+
    "\0\u3948\0\u3996\0\u39e4\0\u3a32\0\u3a80\0\u3ace\0\u3b1c\0\u3b6a"+
    "\0\u3bb8\0\u3c06\0\u3c54\0\u3ca2\0\u3cf0\0\u3d3e\0\u3d8c\0\u3dda"+
    "\0\u3e28\0\u3e76\0\u3ec4\0\u3f12\0\u3f60\0\u3fae\0\u3ffc\0\u404a"+
    "\0\u4098\0\u40e6\0\u4134\0\u4182\0\u41d0\0\u421e\0\u426c\0\u42ba"+
    "\0\u4308\0\u4356\0\u43a4\0\u43f2\0\u4440\0\u448e\0\u44dc\0\u452a"+
    "\0\u4578\0\u45c6\0\u4614\0\u4662\0\u46b0\0\u46fe\0\u474c\0\u479a"+
    "\0\u47e8\0\u4836\0\u06b4\0\u4884\0\u48d2\0\u4920\0\u496e\0\u49bc"+
    "\0\u4a0a\0\u4a58\0\u4aa6\0\u4af4\0\u4b42\0\u4b90\0\u4bde\0\u4c2c"+
    "\0\u4c7a\0\u4cc8\0\u4d16\0\u4d64\0\u4db2\0\u4e00\0\u4e4e\0\u4e9c"+
    "\0\u4eea\0\u4f38\0\u4f86\0\u4fd4\0\u5022\0\u5070\0\u50be\0\u510c"+
    "\0\u515a\0\u51a8\0\u51f6\0\u5244\0\u5292\0\u52e0\0\u532e\0\u537c"+
    "\0\u53ca\0\u5418\0\u5466\0\u54b4\0\u3330\0\u5502\0\u5550\0\u559e"+
    "\0\u55ec\0\u563a\0\u5688\0\u56d6\0\u5724\0\u5772\0\u57c0\0\u580e"+
    "\0\u585c\0\u58aa\0\u58f8\0\u5946\0\u5994\0\u59e2\0\u5a30\0\u3f12"+
    "\0\u5a7e\0\u5acc\0\u5b1a\0\u5b68\0\u5bb6\0\u5c04\0\u5c52\0\u5ca0"+
    "\0\u5cee\0\u5d3c\0\u5d8a\0\u5dd8\0\u5e26\0\u5e74\0\u5ec2\0\u5f10"+
    "\0\u5f5e\0\u5fac\0\u5ffa\0\u6048\0\u6096\0\u60e4\0\u6132\0\u6180"+
    "\0\u61ce\0\u621c\0\u626a\0\u62b8\0\u6306\0\u6354\0\u63a2\0\u63f0"+
    "\0\u643e\0\u648c\0\u64da\0\u6528\0\u6576\0\u65c4\0\u6612\0\u6660"+
    "\0\u66ae\0\u66fc\0\u674a\0\u6798\0\u67e6\0\u6834\0\u6882\0\u68d0"+
    "\0\u691e\0\u696c\0\u69ba\0\234";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\0\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\2\36\1\40"+
    "\1\36\1\41\1\36\1\42\1\43\1\44\1\45\1\36"+
    "\1\46\1\47\3\36\1\50\1\3\1\51\1\3\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\36\1\61"+
    "\1\36\1\62\1\36\1\63\1\36\1\64\1\65\1\66"+
    "\1\67\1\36\1\70\1\71\3\36\1\72\1\73\1\74"+
    "\2\75\1\76\1\75\1\77\5\75\1\100\4\75\1\101"+
    "\76\75\117\0\2\4\115\0\1\76\113\0\2\6\1\0"+
    "\1\6\1\0\1\102\52\6\1\103\35\6\7\0\1\104"+
    "\121\0\1\105\2\0\1\106\1\0\1\21\112\0\1\105"+
    "\1\106\1\0\1\21\115\0\1\107\107\0\1\110\116\0"+
    "\1\111\1\0\1\111\1\107\1\0\1\21\121\0\1\112"+
    "\115\0\1\113\1\114\114\0\1\115\104\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\1\36\1\120\27\36\3\0"+
    "\31\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\16\36\1\121\1\36\1\122\6\36\1\123\1\36\3\0"+
    "\31\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\1\124\6\36\1\125\3\36\1\126\2\36\1\127\12\36"+
    "\3\0\31\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\4\36\1\130\11\36\1\131\12\36\3\0\31\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\13\36"+
    "\1\132\2\36\1\133\7\36\1\134\2\36\3\0\31\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\1\135"+
    "\7\36\1\136\2\36\1\137\2\36\1\140\12\36\3\0"+
    "\31\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\16\36\1\141\12\36\3\0\31\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\31\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\5\36\1\142"+
    "\6\36\1\143\1\144\13\36\3\0\31\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\16\36\1\145\12\36"+
    "\3\0\31\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\1\146\3\36\1\147\24\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\1\150\17\36"+
    "\1\151\2\36\1\152\5\36\3\0\31\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\4\36\1\153\24\36"+
    "\3\0\31\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\7\36\1\154\12\36\1\155\1\156\1\36\1\157"+
    "\1\36\1\160\1\36\3\0\31\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\7\36\1\161\10\36\1\162"+
    "\10\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\16\36\1\163\12\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\7\36\1\164"+
    "\21\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\31\36\3\0\2\36\1\165\26\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\31\36\3\0"+
    "\16\36\1\166\1\36\1\167\6\36\1\170\1\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\31\36\3\0"+
    "\1\36\1\171\6\36\1\172\2\36\1\173\2\36\1\174"+
    "\12\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\31\36\3\0\5\36\1\175\10\36\1\176\7\36\1\177"+
    "\2\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\31\36\3\0\13\36\1\200\12\36\1\201\2\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\31\36\3\0"+
    "\1\36\1\202\7\36\1\203\1\36\1\204\2\36\1\205"+
    "\12\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\31\36\3\0\16\36\1\206\12\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\31\36\3\0\6\36\1\142"+
    "\5\36\1\207\1\210\13\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\31\36\3\0\16\36\1\211\12\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\31\36"+
    "\3\0\1\36\1\212\3\36\1\213\23\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\31\36\3\0\1\36"+
    "\1\214\16\36\1\215\2\36\1\216\5\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\31\36\3\0\5\36"+
    "\1\217\23\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\31\36\3\0\10\36\1\220\11\36\1\221\1\222"+
    "\1\36\1\223\1\36\1\224\1\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\31\36\3\0\10\36\1\225"+
    "\7\36\1\226\10\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\31\36\3\0\16\36\1\227\12\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\31\36\3\0"+
    "\10\36\1\230\20\36\117\0\1\231\1\0\2\75\1\0"+
    "\7\75\1\232\4\75\1\233\100\75\1\76\7\75\1\232"+
    "\4\75\1\233\100\75\1\0\7\75\1\234\4\75\1\235"+
    "\100\75\1\0\7\75\1\236\4\75\1\237\76\75\1\6"+
    "\1\240\1\241\1\6\1\241\1\242\52\6\1\103\35\6"+
    "\26\0\31\243\4\0\30\243\23\0\1\244\110\0\1\245"+
    "\4\0\1\36\112\0\1\245\2\0\1\36\110\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\21\36\1\246\7\36"+
    "\3\0\31\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\16\36\1\247\12\36\3\0\31\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\4\36\1\250\24\36"+
    "\3\0\31\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\22\36\1\251\6\36\3\0\31\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\21\36\1\251\1\252"+
    "\6\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\1\140\30\36\3\0\31\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\1\253\30\36\3\0"+
    "\31\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\15\36\1\254\13\36\3\0\31\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\5\36\1\255\23\36\3\0"+
    "\31\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\23\36\1\256\5\36\3\0\31\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\21\36\1\251\7\36\3\0"+
    "\31\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\5\36\1\257\23\36\3\0\31\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\22\36\1\260\6\36\3\0"+
    "\31\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\13\36\1\261\15\36\3\0\31\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\15\36\1\262\13\36\3\0"+
    "\31\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\16\36\1\263\12\36\3\0\31\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\20\36\1\142\10\36\3\0"+
    "\31\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\16\36\1\264\12\36\3\0\31\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\17\36\1\265\11\36\3\0"+
    "\31\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\21\36\1\266\1\267\6\36\3\0\31\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\15\36\1\270\13\36"+
    "\3\0\31\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\22\36\1\271\6\36\3\0\31\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\25\36\1\142\3\36"+
    "\3\0\31\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\2\36\1\272\26\36\3\0\31\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\10\36\1\273\5\36"+
    "\1\274\12\36\3\0\31\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\1\36\1\275\27\36\3\0\31\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\22\36"+
    "\1\276\6\36\3\0\31\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\16\36\1\277\12\36\3\0\31\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\1\300"+
    "\17\36\1\301\10\36\3\0\31\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\17\36\1\302\11\36\3\0"+
    "\31\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\10\36\1\303\20\36\3\0\31\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\15\36\1\304\13\36\3\0"+
    "\31\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\10\36\1\305\7\36\1\306\10\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\1\307\22\36"+
    "\1\310\3\36\1\142\1\36\3\0\31\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\10\36\1\311\2\36"+
    "\1\312\15\36\3\0\31\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\10\36\1\313\20\36\3\0\31\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\31\36"+
    "\3\0\21\36\1\314\7\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\31\36\3\0\16\36\1\315\12\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\31\36"+
    "\3\0\5\36\1\316\23\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\31\36\3\0\22\36\1\317\6\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\31\36"+
    "\3\0\21\36\1\317\1\320\6\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\31\36\3\0\1\36\1\205"+
    "\27\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\31\36\3\0\1\36\1\321\27\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\31\36\3\0\14\36\1\322"+
    "\1\323\13\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\31\36\3\0\6\36\1\324\22\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\31\36\3\0\23\36"+
    "\1\325\5\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\31\36\3\0\22\36\1\326\6\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\31\36\3\0\21\36"+
    "\1\317\7\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\31\36\3\0\22\36\1\327\6\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\31\36\3\0\13\36"+
    "\1\330\15\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\31\36\3\0\15\36\1\331\13\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\31\36\3\0\16\36"+
    "\1\332\12\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\31\36\3\0\20\36\1\142\10\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\31\36\3\0\22\36"+
    "\1\333\6\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\31\36\3\0\17\36\1\334\11\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\31\36\3\0\21\36"+
    "\1\335\1\336\6\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\31\36\3\0\15\36\1\337\13\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\31\36\3\0"+
    "\22\36\1\340\6\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\31\36\3\0\25\36\1\142\3\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\31\36\3\0"+
    "\3\36\1\341\25\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\31\36\3\0\11\36\1\342\4\36\1\343"+
    "\12\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\31\36\3\0\2\36\1\344\26\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\31\36\3\0\22\36\1\345"+
    "\6\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\31\36\3\0\16\36\1\346\12\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\31\36\3\0\1\36\1\347"+
    "\16\36\1\350\10\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\31\36\3\0\17\36\1\351\11\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\31\36\3\0"+
    "\11\36\1\352\17\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\31\36\3\0\15\36\1\353\13\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\31\36\3\0"+
    "\11\36\1\354\6\36\1\355\10\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\31\36\3\0\1\36\1\356"+
    "\21\36\1\357\3\36\1\142\1\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\31\36\3\0\11\36\1\360"+
    "\1\36\1\361\15\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\31\36\3\0\11\36\1\362\17\36\3\0"+
    "\2\75\1\0\7\75\1\234\4\75\1\0\100\75\1\0"+
    "\7\75\1\0\4\75\1\237\100\75\1\0\7\75\1\234"+
    "\4\75\1\233\100\75\1\0\7\75\1\232\4\75\1\237"+
    "\76\75\1\6\1\240\1\241\1\6\1\241\1\102\52\6"+
    "\1\103\35\6\1\0\2\241\1\0\1\241\53\0\1\6"+
    "\50\0\1\363\1\0\1\363\2\0\1\243\5\0\31\243"+
    "\3\0\31\243\16\0\1\111\1\0\1\111\2\0\1\244"+
    "\110\0\1\116\1\0\1\117\2\0\1\36\5\0\22\36"+
    "\1\364\6\36\3\0\31\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\13\36\1\365\15\36\3\0\31\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\1\366"+
    "\30\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\4\36\1\142\24\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\2\36\1\367"+
    "\26\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\21\36\1\305\7\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\21\36\1\370"+
    "\1\371\6\36\3\0\31\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\1\372\30\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\1\36\1\313"+
    "\27\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\4\36\1\373\24\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\21\36\1\310"+
    "\7\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\1\374\30\36\3\0\31\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\1\370\30\36\3\0"+
    "\31\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\22\36\1\375\6\36\3\0\31\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\13\36\1\376\2\36\1\277"+
    "\12\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\22\36\1\377\6\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\4\36\1\u0100"+
    "\24\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\6\36\1\142\22\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\10\36\1\u0101"+
    "\20\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\12\36\1\u0102\16\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\24\36\1\u0103"+
    "\4\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\22\36\1\u0104\6\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\13\36\1\u0105"+
    "\15\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\23\36\1\u0106\5\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\20\36\1\370"+
    "\10\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\22\36\1\u0105\6\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\10\36\1\u0107"+
    "\20\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\4\36\1\140\24\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\22\36\1\252"+
    "\6\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\2\36\1\u0108\26\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\21\36\1\142"+
    "\7\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\16\36\1\u0109\12\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\15\36\1\u010a"+
    "\13\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\4\36\1\u010b\24\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\3\36\1\142"+
    "\25\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\1\u010c\30\36\3\0\31\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\13\36\1\251\15\36"+
    "\3\0\31\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\31\36\3\0\22\36\1\u010d\6\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\31\36\3\0\13\36"+
    "\1\u010e\15\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\31\36\3\0\1\36\1\u010f\27\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\31\36\3\0\5\36"+
    "\1\142\23\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\31\36\3\0\3\36\1\u0110\25\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\31\36\3\0\21\36"+
    "\1\354\7\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\31\36\3\0\17\36\1\u0111\11\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\31\36\3\0\21\36"+
    "\1\u0112\1\u0113\6\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\31\36\3\0\1\36\1\u0114\27\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\31\36\3\0"+
    "\2\36\1\362\26\36\16\0\1\116\1\0\1\117\1\u0115"+
    "\1\0\1\36\5\0\31\36\3\0\31\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\31\36\3\0\5\36"+
    "\1\u0116\23\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\31\36\3\0\21\36\1\357\7\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\31\36\3\0\1\36"+
    "\1\u0117\27\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\31\36\3\0\1\36\1\u0112\27\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\31\36\3\0\16\36"+
    "\1\142\12\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\31\36\3\0\13\36\1\u0118\2\36\1\346\12\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\31\36"+
    "\3\0\22\36\1\u0119\6\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\31\36\3\0\5\36\1\u011a\23\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\31\36"+
    "\3\0\7\36\1\142\21\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\31\36\3\0\11\36\1\u011b\17\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\31\36"+
    "\3\0\12\36\1\u011c\16\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\31\36\3\0\24\36\1\u011d\4\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\31\36"+
    "\3\0\22\36\1\u011e\6\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\31\36\3\0\13\36\1\u011f\15\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\31\36"+
    "\3\0\23\36\1\u0120\5\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\31\36\3\0\20\36\1\u0112\10\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\31\36"+
    "\3\0\22\36\1\u011f\6\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\31\36\3\0\11\36\1\u0121\17\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\31\36"+
    "\3\0\5\36\1\205\23\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\31\36\3\0\22\36\1\320\6\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\31\36"+
    "\3\0\3\36\1\u0122\25\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\31\36\3\0\21\36\1\142\7\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\31\36"+
    "\3\0\16\36\1\u0123\12\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\31\36\3\0\15\36\1\u0124\13\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\31\36"+
    "\3\0\5\36\1\u010b\23\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\31\36\3\0\4\36\1\142\24\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\31\36"+
    "\3\0\1\36\1\u0125\27\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\31\36\3\0\13\36\1\317\15\36"+
    "\23\0\1\243\110\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\20\36\1\u0126\10\36\3\0\31\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\4\36\1\u0127\24\36"+
    "\3\0\31\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\12\36\1\142\16\36\3\0\31\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\7\36\1\142\21\36"+
    "\3\0\31\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\22\36\1\142\6\36\3\0\31\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\10\36\1\u0128\20\36"+
    "\3\0\31\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\23\36\1\u0129\5\36\3\0\31\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\15\36\1\u012a\13\36"+
    "\3\0\31\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\13\36\1\u012b\15\36\3\0\31\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\16\36\1\142\12\36"+
    "\3\0\31\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\4\36\1\u012c\24\36\3\0\31\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\1\u012d\30\36\3\0"+
    "\31\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\20\36\1\u012e\10\36\3\0\31\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\24\36\1\251\4\36\3\0"+
    "\31\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\1\u012f\30\36\3\0\31\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\1\123\30\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\4\36\1\u0130"+
    "\24\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\10\36\1\u0131\20\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\20\36\1\u0132"+
    "\10\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\2\36\1\u0133\26\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\7\36\1\u0134"+
    "\21\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\25\36\1\u0135\3\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\21\36\1\u0136"+
    "\7\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\22\36\1\164\6\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\31\36\3\0"+
    "\20\36\1\u0137\10\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\31\36\3\0\5\36\1\u0138\23\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\31\36\3\0"+
    "\12\36\1\142\16\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\31\36\3\0\10\36\1\142\20\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\31\36\3\0"+
    "\11\36\1\u0139\17\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\31\36\3\0\22\36\1\142\6\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\31\36\3\0"+
    "\11\36\1\u013a\17\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\31\36\3\0\23\36\1\u013b\5\36\76\0"+
    "\1\u013c\35\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\31\36\3\0\15\36\1\u013d\13\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\31\36\3\0\13\36\1\u013e"+
    "\15\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\31\36\3\0\5\36\1\u013f\23\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\31\36\3\0\1\36\1\u0140"+
    "\27\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\31\36\3\0\20\36\1\u0141\10\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\31\36\3\0\24\36\1\317"+
    "\4\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\31\36\3\0\1\36\1\u0142\27\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\31\36\3\0\1\36\1\170"+
    "\27\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\31\36\3\0\5\36\1\u0143\23\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\31\36\3\0\11\36\1\u0144"+
    "\17\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\31\36\3\0\20\36\1\u0145\10\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\31\36\3\0\3\36\1\u0146"+
    "\25\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\31\36\3\0\10\36\1\u0147\20\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\31\36\3\0\25\36\1\u0148"+
    "\3\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\31\36\3\0\21\36\1\u0149\7\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\31\36\3\0\22\36\1\230"+
    "\6\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\1\u014a\30\36\3\0\31\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\1\u0132\30\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\15\36\1\u014b"+
    "\13\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\13\36\1\370\15\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\3\36\1\305"+
    "\25\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\13\36\1\u014c\15\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\14\36\1\u014d"+
    "\14\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\15\36\1\u014e\13\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\5\36\1\u014f"+
    "\23\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\6\36\1\251\22\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\2\36\1\u0150"+
    "\26\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\2\36\1\142\26\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\15\36\1\142"+
    "\13\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\22\36\1\u0151\6\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\20\36\1\u0152"+
    "\10\36\3\0\31\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\10\36\1\u0153\20\36\3\0\31\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\31\36\3\0"+
    "\1\36\1\u0154\27\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\31\36\3\0\1\36\1\u0145\27\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\31\36\3\0"+
    "\13\36\1\u0155\15\36\16\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\31\36\3\0\15\36\1\u0156\13\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\31\36\3\0"+
    "\13\36\1\u0112\15\36\102\0\1\u0157\31\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\31\36\3\0\4\36\1\354"+
    "\24\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\31\36\3\0\13\36\1\u0158\15\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\31\36\3\0\14\36\1\u0159"+
    "\14\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\31\36\3\0\15\36\1\u015a\13\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\31\36\3\0\6\36\1\u015b"+
    "\22\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\31\36\3\0\7\36\1\317\21\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\31\36\3\0\3\36\1\u015c"+
    "\25\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\31\36\3\0\3\36\1\142\25\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\31\36\3\0\15\36\1\142"+
    "\13\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\31\36\3\0\22\36\1\u015d\6\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\31\36\3\0\20\36\1\u015e"+
    "\10\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\31\36\3\0\11\36\1\u015f\17\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\2\36\1\370\26\36\3\0"+
    "\31\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\23\36\1\251\5\36\3\0\31\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\27\36\1\142\1\36\3\0"+
    "\31\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\4\36\1\u0160\24\36\3\0\31\36\16\0\1\116\1\0"+
    "\1\117\2\0\1\36\5\0\2\36\1\u0161\26\36\3\0"+
    "\31\36\16\0\1\116\1\0\1\117\2\0\1\36\5\0"+
    "\1\u0162\30\36\3\0\31\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\22\36\1\u0163\6\36\3\0\31\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\5\36"+
    "\1\u0164\23\36\3\0\31\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\16\36\1\u0165\12\36\3\0\31\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\4\36"+
    "\1\u0166\24\36\3\0\31\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\31\36\3\0\3\36\1\u0112\25\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\31\36"+
    "\3\0\5\36\1\u0167\23\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\31\36\3\0\23\36\1\317\5\36"+
    "\76\0\1\u0168\35\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\31\36\3\0\27\36\1\142\1\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\31\36\3\0\5\36"+
    "\1\u0169\23\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\31\36\3\0\3\36\1\u016a\25\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\31\36\3\0\1\36"+
    "\1\u016b\27\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\31\36\3\0\22\36\1\u016c\6\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\31\36\3\0\6\36"+
    "\1\u016d\22\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\31\36\3\0\16\36\1\u016e\12\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\31\36\3\0\5\36"+
    "\1\u016f\23\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\15\36\1\u0170\13\36\3\0\31\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\4\36\1\u0171\24\36"+
    "\3\0\31\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\2\36\1\251\26\36\3\0\31\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\4\36\1\311\24\36"+
    "\3\0\31\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\17\36\1\142\11\36\3\0\31\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\15\36\1\u0172\13\36"+
    "\3\0\31\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\15\36\1\370\13\36\3\0\31\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\31\36\3\0\20\36"+
    "\1\257\10\36\107\0\1\u0173\24\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\31\36\3\0\15\36\1\u0174\13\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\31\36"+
    "\3\0\5\36\1\u0175\23\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\31\36\3\0\3\36\1\317\25\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\31\36"+
    "\3\0\5\36\1\360\23\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\31\36\3\0\17\36\1\142\11\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\31\36"+
    "\3\0\15\36\1\u0176\13\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\31\36\3\0\15\36\1\u0112\13\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\22\36"+
    "\1\305\6\36\3\0\31\36\16\0\1\116\1\0\1\117"+
    "\2\0\1\36\5\0\16\36\1\u0177\12\36\3\0\31\36"+
    "\16\0\1\116\1\0\1\117\2\0\1\36\5\0\10\36"+
    "\1\u0178\20\36\3\0\31\36\13\0\1\u0179\120\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\31\36\3\0\22\36"+
    "\1\354\6\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\31\36\3\0\16\36\1\u017a\12\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\31\36\3\0\11\36"+
    "\1\u017b\17\36\16\0\1\116\1\0\1\117\2\0\1\36"+
    "\5\0\5\36\1\142\23\36\3\0\31\36\16\0\1\116"+
    "\1\0\1\117\2\0\1\36\5\0\30\36\1\u0163\3\0"+
    "\31\36\14\0\1\u017c\117\0\1\116\1\0\1\117\2\0"+
    "\1\36\5\0\31\36\3\0\6\36\1\142\22\36\16\0"+
    "\1\116\1\0\1\117\2\0\1\36\5\0\31\36\3\0"+
    "\30\36\1\u016c\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27144];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\1\11\1\1\3\11\1\1\1\11"+
    "\5\1\1\11\1\1\1\11\22\1\2\11\20\1\1\11"+
    "\1\1\1\11\1\1\1\11\3\1\1\11\1\1\1\11"+
    "\2\0\1\1\1\11\1\0\4\11\2\0\111\1\1\11"+
    "\2\0\1\1\2\11\2\1\1\0\3\1\1\11\115\1"+
    "\1\0\41\1\1\0\46\1\1\0\32\1\1\0\20\1"+
    "\1\0\12\1\1\0\5\1\1\0\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private int comment_count = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }
  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          //  System.out.println("action [118] { System.out.println(\"Illegal character: <\" + yytext() + \">\");"+ZZ_NL+"\tUtility.error(Utility.E_UNMATCHED); }");
            { System.out.println("Illegal character: <" + yytext() + ">");
	Utility.error(Utility.E_UNMATCHED);
            }
            // fall through
          case 39: break;
          case 2:
           System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            //System.out.println("action [70] {  }");
            { 
            }
            // fall through
          case 40: break;
          case 3:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
           // System.out.println("action [79] { String str =  yytext().substring(1,yytext().length());"+ZZ_NL+"    Utility.error(Utility.E_UNCLOSEDSTR);"+ZZ_NL+"    return (new Yytoken(25,str,\"String\",yyline+1,yycolumn+1)); }");
            { String str =  yytext().substring(1,yytext().length());
    Utility.error(Utility.E_UNCLOSEDSTR);
    return (new Yytoken(25,str,"String",yyline+1,yycolumn+1));
            }
            // fall through
          case 41: break;
          case 4:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
           // System.out.println("action [68] { return (new Yytoken(23,yytext(),\"Operators\",yyline+1,yycolumn+1 )); }");
            { return (new Yytoken(23,yytext(),"Operators",yyline+1,yycolumn+1 ));
            }
            // fall through
          case 42: break;
          case 5:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            //System.out.println("action [48] { return (new Yytoken(3,yytext(),\"Separators\",yyline+1,yycolumn+1)); }");
            { return (new Yytoken(3,yytext(),"Separators",yyline+1,yycolumn+1));
            }
            // fall through
          case 43: break;
          case 6:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
           // System.out.println("action [49] { return (new Yytoken(4,yytext(),\"Separators\",yyline+1,yycolumn+1 )); }");
            { return (new Yytoken(4,yytext(),"Separators",yyline+1,yycolumn+1 ));
            }
            // fall through
          case 44: break;
          case 7:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            //System.out.println("action [57] { return (new Yytoken(12,yytext(),\"Operators\",yyline+1,yycolumn+1 )); }");
            { return (new Yytoken(12,yytext(),"Operators",yyline+1,yycolumn+1 ));
            }
            // fall through
          case 45: break;
          case 8:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
           // System.out.println("action [55] { return (new Yytoken(10,yytext(),\"Operators\",yyline+1,yycolumn+1 )); }");
            { return (new Yytoken(10,yytext(),"Operators",yyline+1,yycolumn+1 ));
            }
            // fall through
          case 46: break;
          case 9:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            //System.out.println("action [45] { return (new Yytoken(0,yytext(),\"Separators\",yyline+1,yycolumn+1) ); }");
            { return (new Yytoken(0,yytext(),"Separators",yyline+1,yycolumn+1) );
            }
            // fall through
          case 47: break;
          case 10:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
           // System.out.println("action [56] { return (new Yytoken(11,yytext(),\"Operators\",yyline+1,yycolumn+1)); }");
            { return (new Yytoken(11,yytext(),"Operators",yyline+1,yycolumn+1));
            }
            // fall through
          case 48: break;
          case 11:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            //System.out.println("action [54] { return (new Yytoken(9,yytext(),\"Separators\",yyline+1,yycolumn+1 )); }");
            { return (new Yytoken(9,yytext(),"Separators",yyline+1,yycolumn+1 ));
            }
            // fall through
          case 49: break;
          case 12:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            //System.out.println("action [58] { return (new Yytoken(13,yytext(),\"Operators\",yyline+1,yycolumn+1 )); }");
            { return (new Yytoken(13,yytext(),"Operators",yyline+1,yycolumn+1 ));
            }
            // fall through
          case 50: break;
          case 13:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            //System.out.println("action [85] { return (new Yytoken(26,yytext(),\"number\",yyline+1,yycolumn+1 )); }");
            { return (new Yytoken(26,yytext(),"number",yyline+1,yycolumn+1 ));
            }
            // fall through
          case 51: break;
          case 14:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            //System.out.println("action [46] { return (new Yytoken(1,yytext(),\"Separators\",yyline+1,yycolumn+1 )); }");
            { return (new Yytoken(1,yytext(),"Separators",yyline+1,yycolumn+1 ));
            }
            // fall through
          case 52: break;
          case 15:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            //System.out.println("action [47] { return (new Yytoken(2,yytext(),\"Separators\",yyline+1,yycolumn+1)); }");
            { return (new Yytoken(2,yytext(),"Separators",yyline+1,yycolumn+1));
            }
            // fall through
          case 53: break;
          case 16:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
           // System.out.println("action [61] { return (new Yytoken(16,yytext(),\"Operators\",yyline+1,yycolumn+1)); }");
            { return (new Yytoken(16,yytext(),"Operators",yyline+1,yycolumn+1));
            }
            // fall through
          case 54: break;
          case 17:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            //System.out.println("action [59] { return (new Yytoken(14,yytext(),\"Operators\",yyline+1,yycolumn+1)); }");
            { return (new Yytoken(14,yytext(),"Operators",yyline+1,yycolumn+1));
            }
            // fall through
          case 55: break;
          case 18:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            //System.out.println("action [63] { return (new Yytoken(18,yytext(),\"Operators\",yyline+1,yycolumn+1 )); }");
            { return (new Yytoken(18,yytext(),"Operators",yyline+1,yycolumn+1 ));
            }
            // fall through
          case 56: break;
          case 19:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
           // System.out.println("action [103] { return (new Yytoken(31,yytext(),\"Ident\",yyline+1,yycolumn+1)); }");
            { return (new Yytoken(31,yytext(),"Ident",yyline+1,yycolumn+1));
            }
            // fall through
          case 57: break;
          case 20:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            //System.out.println("action [50] { return (new Yytoken(5,yytext(),\"Separators\",yyline+1,yycolumn+1)); }");
            { return (new Yytoken(5,yytext(),"Separators",yyline+1,yycolumn+1));
            }
            // fall through
          case 58: break;
          case 21:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            //System.out.println("action [51] { return (new Yytoken(6,yytext(),\"Separators\",yyline+1,yycolumn+1)); }");
            { return (new Yytoken(6,yytext(),"Separators",yyline+1,yycolumn+1));
            }
            // fall through
          case 59: break;
          case 22:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            //System.out.println("action [52] { return (new Yytoken(7,yytext(),\"Separators\",yyline+1,yycolumn+1 )); }");
            { return (new Yytoken(7,yytext(),"Separators",yyline+1,yycolumn+1 ));
            }
            // fall through
          case 60: break;
          case 23:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
           // System.out.println("action [53] { return (new Yytoken(8,yytext(),\"Separators\",yyline+1,yycolumn+1)); }");
            { return (new Yytoken(8,yytext(),"Separators",yyline+1,yycolumn+1));
            }
            // fall through
          case 61: break;
          case 24:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            //System.out.println("action [74] { String str =  yytext().substring(1,yylength()-1);"+ZZ_NL+"    return (new Yytoken(24,str,\"String\",yyline+1,yycolumn+1 )); }");
            { String str =  yytext().substring(1,yylength()-1);
    return (new Yytoken(24,str,"String",yyline+1,yycolumn+1 ));
            }
            // fall through
          case 62: break;
          case 25:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            //System.out.println("action [65] { return (new Yytoken(20,yytext(),\"Logical Operators\",yyline+1,yycolumn+1)); }");
            { return (new Yytoken(20,yytext(),"Logical Operators",yyline+1,yycolumn+1));
            }
            // fall through
          case 63: break;
          case 26:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
           // System.out.println("action [87] { return (new Yytoken(27,yytext(),\"float number\",yyline+1,yycolumn+1 )); }");
            { return (new Yytoken(27,yytext(),"float number",yyline+1,yycolumn+1 ));
            }
            // fall through
          case 64: break;
          case 27:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
           // System.out.println("action [72] { yybegin(COMMENT); comment_count++; }");
            { yybegin(COMMENT); comment_count++;
            }
            // fall through
          case 65: break;
          case 28:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
           // System.out.println("action [67] { return (new Yytoken(22,yytext(),\"Operators\",yyline+1,yycolumn+1)); }");
            { return (new Yytoken(22,yytext(),"Operators",yyline+1,yycolumn+1));
            }
            // fall through
          case 66: break;
          case 29:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
           // System.out.println("action [62] { return (new Yytoken(17,yytext(),\"Operators\",yyline+1,yycolumn+1 )); }");
            { return (new Yytoken(17,yytext(),"Operators",yyline+1,yycolumn+1 ));
            }
            // fall through
          case 67: break;
          case 30:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
           // System.out.println("action [60] { return (new Yytoken(15,yytext(),\"Separators\",yyline+1,yycolumn+1)); }");
            { return (new Yytoken(15,yytext(),"Separators",yyline+1,yycolumn+1));
            }
            // fall through
          case 68: break;
          case 31:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
           // System.out.println("action [64] { return (new Yytoken(19,yytext(),\"Operators\",yyline+1,yycolumn+1)); }");
            { return (new Yytoken(19,yytext(),"Operators",yyline+1,yycolumn+1));
            }
            // fall through
          case 69: break;
          case 32:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            //System.out.println("action [97] { String str =  yytext().substring(0,yylength());"+ZZ_NL+"     return (new Yytoken(30,str,\"KEYWORD\",yyline+1,yycolumn+1 )); }");
            { String str =  yytext().substring(0,yylength());
     return (new Yytoken(30,str,"KEYWORD",yyline+1,yycolumn+1 ));
            }
            // fall through
          case 70: break;
          case 33:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            //System.out.println("action [66] { return (new Yytoken(21,yytext(),\"Logical Operators\",yyline+1,yycolumn+1 )); }");
            { return (new Yytoken(21,yytext(),"Logical Operators",yyline+1,yycolumn+1 ));
            }
            // fall through
          case 71: break;
          case 34:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            //System.out.println("action [111] { if (--comment_count == 0) yybegin(YYINITIAL); }");
            { if (--comment_count == 0) yybegin(YYINITIAL);
            }
            // fall through
          case 72: break;
          case 35:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            //System.out.println("action [110] { comment_count++; }");
            { comment_count++;
            }
            // fall through
          case 73: break;
          case 36:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            //System.out.println("action [105] { return (new Yytoken(32,yytext(),\"Incremental/Decremental\",yyline+1,yycolumn+1 )); }");
            { return (new Yytoken(32,yytext(),"Incremental/Decremental",yyline+1,yycolumn+1 ));
            }
            // fall through
          case 74: break;
          case 37:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
           // System.out.println("action [92] { String str =  yytext().substring(0,yylength());"+ZZ_NL+"    return (new Yytoken(29,str,\"Reserved\",yyline+1,yycolumn+1 )); }");
            { String str =  yytext().substring(0,yylength());
    return (new Yytoken(29,str,"Reserved",yyline+1,yycolumn+1 ));
            }
            // fall through
          case 75: break;
          case 38:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            //System.out.println("action [89] { return (new Yytoken(28,yytext(),\"Boolean\",yyline+1,yycolumn+1 )); }");
            { return (new Yytoken(28,yytext(),"Boolean",yyline+1,yycolumn+1 ));
            }
            // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
 * @throws IOException 
   */
  public static void main(String[] argv) throws IOException {
    if (argv.length == 0) {
      System.out.println("Usage : java Yylex [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Yylex scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Yylex(reader);
          do {
            System.out.println(scanner.yylex());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
      
     // String encodingName = "UTF-8";
	  File dir = new File("filefolder");
      File[] files = dir.listFiles();
      // Fetching all the files
      for (File file : files) {
          if(file.isFile()) {
        	  
        	  Yylex scanner = null;
              try {
                java.io.FileInputStream stream = new java.io.FileInputStream(file);
                java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
                scanner = new Yylex(reader);
                do {
                  System.out.println(scanner.yylex());
                } while (!scanner.zzAtEOF);
        	  
        	  
              }
              catch (java.io.FileNotFoundException e) {
                 
              }
      
          }}
      
      
    }
  }


}
